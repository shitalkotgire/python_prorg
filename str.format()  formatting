{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "181b9d25",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edureka is a good option for beginners in python\n"
     ]
    }
   ],
   "source": [
    "print(\"{} is a good option for beginners in python\".format(\"Edureka\"))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "bcbb4590",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "10 is a good option for beginners in python\n"
     ]
    }
   ],
   "source": [
    "print(\"{} is a good option for beginners in python\".format(10))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "108026c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edureka is a good option for beginners in Machine Learning\n"
     ]
    }
   ],
   "source": [
    "my_string = \"{} is a good option for beginners in {}\"\n",
    "print(my_string.format(\"Edureka\",\"Machine Learning\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "15986a99",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edureka is a good option for beginners in Machine Learning\n"
     ]
    }
   ],
   "source": [
    "#Formatters using Positional and Keywords Arguments:\n",
    "#the values that exist among the str.format() method are primarily tuple data types\n",
    "my_string = \"{0} is a good option for beginners in {1}\"\n",
    "print(my_string.format(\"Edureka\",\"Machine Learning\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a5f9f5de",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Machine Learning is a good option for beginners in Edureka\n"
     ]
    }
   ],
   "source": [
    "my_string = \"{1} is a good option for beginners in {0}\"\n",
    "print(my_string.format(\"Edureka\",\"Machine Learning\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "c969d423",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Edureka is a good option for beginners in Machine Learning\n"
     ]
    }
   ],
   "source": [
    "my_string = \"{0} is a good option for beginners in {domain}\"\n",
    "print(my_string.format(\"Edureka\",domain = \"Machine Learning\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "042f5aa4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Temperature in Vizag today is 22 degrees outside!\n"
     ]
    }
   ],
   "source": [
    "my_string = \"The Temperature in {0} today is {1:d} degrees outside!\"\n",
    "print(my_string.format(\"Vizag\",22))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6d3f12ee",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "Unknown format code 'd' for object of type 'float'",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "\u001b[1;32m<ipython-input-9-1bdbfbd61f35>\u001b[0m in \u001b[0;36m<module>\u001b[1;34m\u001b[0m\n\u001b[0;32m      1\u001b[0m \u001b[0mmy_string\u001b[0m \u001b[1;33m=\u001b[0m \u001b[1;34m\"The Temperature in {0} today is {1:d} degrees outside!\"\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[1;32m----> 2\u001b[1;33m \u001b[0mprint\u001b[0m\u001b[1;33m(\u001b[0m\u001b[0mmy_string\u001b[0m\u001b[1;33m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[1;33m(\u001b[0m\u001b[1;34m\"Vizag\"\u001b[0m\u001b[1;33m,\u001b[0m\u001b[1;36m22.34\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m)\u001b[0m\u001b[1;33m\u001b[0m\u001b[1;33m\u001b[0m\u001b[0m\n\u001b[0m",
      "\u001b[1;31mValueError\u001b[0m: Unknown format code 'd' for object of type 'float'"
     ]
    }
   ],
   "source": [
    "my_string = \"The Temperature in {0} today is {1:d} degrees outside!\"\n",
    "print(my_string.format(\"Vizag\",22.34))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "31247881",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Temperature in Vizag today is 22.02 degrees outside!\n"
     ]
    }
   ],
   "source": [
    "my_string = \"The Temperature in {0} today is {1:.2f} degrees outside!\"\n",
    "print(my_string.format(\"Vizag\",22.025))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "03e61f08",
   "metadata": {},
   "outputs": [],
   "source": [
    "Spacing and Alignments using formatter:\n",
    "We can use the format() to apply spaces or alignment to the right or left or both sides of the placeholder. The alignment codes are:\n",
    "\n",
    "<   :  left-align text\n",
    "\n",
    "^   :  center text\n",
    "\n",
    ">   :  right-align"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "26999c53",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Temperature in Vizag      today is         10 degrees outside!\n"
     ]
    }
   ],
   "source": [
    "my_string = \"The Temperature in {0:10} today is {1:10} degrees outside!\"\n",
    "print(my_string.format(\"Vizag\",10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "4d08f31e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The Temperature in   Vizag    today is     10     degrees outside!\n"
     ]
    }
   ],
   "source": [
    "my_string = \"The Temperature in {0:^10} today is {1:^10} degrees outside!\"\n",
    "print(my_string.format(\"Vizag\",10))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "efbcd217",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     5     25    125\n",
      "     6     36    216\n",
      "     7     49    343\n",
      "     8     64    512\n",
      "     9     81    729\n",
      "    10    100   1000\n",
      "    11    121   1331\n",
      "    12    144   1728\n",
      "    13    169   2197\n",
      "    14    196   2744\n"
     ]
    }
   ],
   "source": [
    "#organizing data\n",
    "for i in range(5,15):\n",
    "    print(\"{:6d} {:6d} {:6d}\".format(i,i*i,i*i*i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "3ed943f6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "  5.000000  25.000000 125.000000 \n",
      "  6.000000  36.000000 216.000000 \n",
      "  7.000000  49.000000 343.000000 \n",
      "  8.000000  64.000000 512.000000 \n",
      "  9.000000  81.000000 729.000000 \n",
      " 10.000000 100.000000 1000.000000 \n",
      " 11.000000 121.000000 1331.000000 \n",
      " 12.000000 144.000000 1728.000000 \n",
      " 13.000000 169.000000 2197.000000 \n",
      " 14.000000 196.000000 2744.000000 \n"
     ]
    }
   ],
   "source": [
    "for i in range(5,15):\n",
    "    print (\"{:10f} {:10f} {:10f} \".format(i,i*i,i*i*i))\n",
    "   # print(\"{:6} {:6d} {:6d}\".format(i,i*i,i*i*i))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "de8d4e5d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
